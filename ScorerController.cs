//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Player/ScorerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ScorerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ScorerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ScorerController"",
    ""maps"": [
        {
            ""name"": ""ScorerActionMap"",
            ""id"": ""5bac6759-c129-4df1-8b42-87bdc715174a"",
            ""actions"": [
                {
                    ""name"": ""Activating"",
                    ""type"": ""Button"",
                    ""id"": ""27633f13-d783-49ee-8ed2-190e99282ad6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3e286207-2797-4772-9fe2-8c534bbd4ffb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Scorer"",
                    ""action"": ""Activating"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Scorer"",
            ""bindingGroup"": ""Scorer"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ScorerActionMap
        m_ScorerActionMap = asset.FindActionMap("ScorerActionMap", throwIfNotFound: true);
        m_ScorerActionMap_Activating = m_ScorerActionMap.FindAction("Activating", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ScorerActionMap
    private readonly InputActionMap m_ScorerActionMap;
    private List<IScorerActionMapActions> m_ScorerActionMapActionsCallbackInterfaces = new List<IScorerActionMapActions>();
    private readonly InputAction m_ScorerActionMap_Activating;
    public struct ScorerActionMapActions
    {
        private @ScorerController m_Wrapper;
        public ScorerActionMapActions(@ScorerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Activating => m_Wrapper.m_ScorerActionMap_Activating;
        public InputActionMap Get() { return m_Wrapper.m_ScorerActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScorerActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IScorerActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ScorerActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScorerActionMapActionsCallbackInterfaces.Add(instance);
            @Activating.started += instance.OnActivating;
            @Activating.performed += instance.OnActivating;
            @Activating.canceled += instance.OnActivating;
        }

        private void UnregisterCallbacks(IScorerActionMapActions instance)
        {
            @Activating.started -= instance.OnActivating;
            @Activating.performed -= instance.OnActivating;
            @Activating.canceled -= instance.OnActivating;
        }

        public void RemoveCallbacks(IScorerActionMapActions instance)
        {
            if (m_Wrapper.m_ScorerActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScorerActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ScorerActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScorerActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScorerActionMapActions @ScorerActionMap => new ScorerActionMapActions(this);
    private int m_ScorerSchemeIndex = -1;
    public InputControlScheme ScorerScheme
    {
        get
        {
            if (m_ScorerSchemeIndex == -1) m_ScorerSchemeIndex = asset.FindControlSchemeIndex("Scorer");
            return asset.controlSchemes[m_ScorerSchemeIndex];
        }
    }
    public interface IScorerActionMapActions
    {
        void OnActivating(InputAction.CallbackContext context);
    }
}
